
services:
  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    container_name: nginx
    depends_on:
      - php
      - mysql
      - redis
    networks:
      - laravel
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./src:/var/www/html:delegated



  php:
    build:
      context: .
      dockerfile: php.dockerfile
    container_name: php
    volumes:
      - ./src:/var/www/html:delegated
    networks:
      - laravel

  mysql: #MySQL healthcheck - Ensures MySQL is fully ready before artisan tries to connect
    # Explicit environment variables in artisan service - Overrides any .env settings that might be incorrect
     # Proper service dependency - Artisan waits for MySQL to be healthy
    # Network isolation - All services share the same Docker network for internal communication
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: dockerdb
      MYSQL_USER: user
      MYSQL_PASSWORD: secret
    networks:
      - laravel
    ports:
      - "4306:3306"
    volumes:
      - ./mysql:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser", "-psecret" ]
      interval: 5s
      timeout: 10s
      retries: 10


  composer:
    image: composer:latest
    container_name: composer
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html # Makes sure it runs commands from the app directory
    entrypoint: [ "composer" ]  # Ensures the container will run composer commands directly

    networks:
      - laravel

#artisan was built on php docker entry file
  # running docker-compose run --rm artisan  command was made possible becase ofthe entry point
  artisan:
    build:
      context: .
      dockerfile: php.dockerfile
    container_name: artisan
    volumes:
      - ./src:/var/www/html:delegated
    working_dir: /var/www/html
    entrypoint: [ "php", "artisan" ]
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - laravel
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: dockerdb
      DB_USERNAME: user
      DB_PASSWORD: secret



  redis:
      image: redis:latest
      container_name: redis
      ports:
        - 6379:6379
      networks:
        - laravel

  scheduler:
      build:
        context: .
        dockerfile: php.dockerfile
      container_name: scheduler
      working_dir: /var/www/html
      entrypoint: [ "php", "artisan", "schedule:work" ]
      networks:
        - laravel

  queue-worker:
    build:
      context: .
      dockerfile: php.dockerfile
    container_name: queue-worker
    working_dir: /var/www/html
    entrypoint: [ "php", "artisan", "queue:work", "redis", "--sleep=3", "--tries=3" ]
    depends_on:
      - redis
      - mysql
    networks:
      - laravel


networks:
  laravel:
